# .github/workflows/test.yml
name: Tests

on:
  push:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Download dependencies
      run: go mod download

    - name: Fetch Puzzle Inputs
      run: |
        # Immediate failure if session cookie is missing
        if [ -z "$AOC_SESSION" ]; then
          echo "::error::AOC_SESSION secret is missing. Add it to GitHub Secrets."
          exit 1
        fi

        # Initialize error tracking
        HAS_ERRORS=0

        # Enhanced fetch function with retries
        fetch_input() {
          local year=$1
          local day=$2
          local day_padded=$(printf "%02d" $day)
          local dir="${year}/day${day_padded}"
          local max_retries=3
          local attempt=1
          local retry_delay=1

          # Skip if directory structure is invalid
          if [ ! -d "$dir" ] || [ ! -f "${dir}/solution.go" ]; then
            return 0
          fi

          echo "Fetching input for ${year} day ${day} (${dir})"
          
          while [ $attempt -le $max_retries ]; do
            # Use temporary file to capture response
            local tmpfile=$(mktemp)
            local status_code=$(curl -s -w "%{http_code}" \
              -H "Cookie: session=${AOC_SESSION}" \
              "https://adventofcode.com/${year}/day/${day}/input" \
              -o "$tmpfile" \
              --silent --show-error)
            
            if [ $status_code -eq 200 ]; then
              mv "$tmpfile" "${dir}/in.txt"
              echo "Successfully fetched input for ${year} day ${day}"
              sleep 1  # Maintain server-friendly delay
              return 0
            else
              echo "Attempt ${attempt} failed: HTTP ${status_code}"
              rm -f "$tmpfile"
              sleep $retry_delay
              retry_delay=$((retry_delay * 2))
              attempt=$((attempt + 1))
            fi
          done

          echo "::error::Failed to fetch input for ${year} day ${day} after ${max_retries} attempts"
          HAS_ERRORS=1
          return 1
        }

        # Process year directories
        for dir in *; do
          if [ -d "$dir" ] && [[ "$dir" =~ ^20[0-9]{2}$ ]]; then
            year="$dir"
            echo "Processing year directory: $year"
            for day in {1..25}; do
              fetch_input "$year" "$day"
            done
          fi
        done

        # Final failure if any input failed to fetch
        if [ $HAS_ERRORS -ne 0 ]; then
          echo "::error::Some inputs failed to fetch after retries"
          exit 1
        fi
      env:
        AOC_SESSION: ${{ secrets.AOC_SESSION }}

    - name: Test
      run: go test ./...
      
    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...
